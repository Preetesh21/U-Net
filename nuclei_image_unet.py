# -*- coding: utf-8 -*-
"""nuclei_image_unet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11vTXOAORREPr1yl80AaBvZGPmWqhzxjw
"""

import os
os.environ['KAGGLE_CONFIG_DIR'] = "/content/drive/My Drive/.kaggle2"
# /content/gdrive/My Drive/Kaggle is the path where kaggle.json is present in the Google Drive

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/My Drive/.kaggle2

!kaggle competitions download -c data-science-bowl-2018

!unzip stage1_test.zip

from zipfile import ZipFile

os.mkdir('test')

# Create a ZipFile Object and load sample.zip in it
with ZipFile('stage1_test.zip', 'r') as zipObj:
   # Extract all the contents of zip file in different directory
   zipObj.extractall('test')

os.mkdir('train')

# Create a ZipFile Object and load sample.zip in it
with ZipFile('stage1_train.zip', 'r') as zipObj:
   # Extract all the contents of zip file in different directory
   zipObj.extractall('train')

print('test_data',len(os.listdir('test')))
print('train_data',len(os.listdir('train')))

os.listdir('train')[1]

os.listdir('train/003cee89357d9fe13516167fd67b609a164651b21934585648c740d2c3d86dc1')

os.listdir('train/003cee89357d9fe13516167fd67b609a164651b21934585648c740d2c3d86dc1/masks')

os.listdir('train/003cee89357d9fe13516167fd67b609a164651b21934585648c740d2c3d86dc1/images')

import os
import random
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

import cv2
from tqdm import tqdm_notebook, tnrange
from itertools import chain
from skimage.io import imread, imshow, concatenate_images
from skimage.transform import resize
from skimage.morphology import label
from sklearn.model_selection import train_test_split
from skimage.io import imread
from skimage.transform import resize

import tensorflow as tf

from keras.models import Model, load_model
from keras.layers import Input, BatchNormalization, Activation, Dense, Dropout
from keras.layers.core import Lambda, RepeatVector, Reshape
from keras.layers.convolutional import Conv2D, Conv2DTranspose
from keras.layers.pooling import MaxPooling2D, GlobalMaxPool2D
from keras.layers.merge import concatenate, add
from keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau
from keras.optimizers import Adam
from keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img

height=224
width=224
channels=3
i=0
X_test=np.zeros((len(os.listdir('test')),width,height,3),dtype='float32')
for folder in os.listdir('test'):
  img_path=os.path.join('test/'+folder)
  for images in os.listdir(img_path):
    path=os.path.join(img_path+'/'+images)
    img=cv2.imread(os.path.join(path+'/'+os.listdir(path)[0]))
    img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
    img=cv2.resize(img,(height,width))
    img=np.array(img)
    X_test[i]=img/255

X_test.shape

i=0
X_train=np.zeros((len(os.listdir('train')),width,height,3),dtype='float32')
for folder in os.listdir('train'):
  img_path=os.path.join('train/'+folder)
  path=os.path.join(img_path+'/'+'images')
  img=cv2.imread(os.path.join(path+'/'+os.listdir(path)[0]))
  img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
  img=cv2.resize(img,(height,width))
  img=np.array(img)
  X_train[i]=img/255

X_train.shape

os.listdir(img_path+'/masks')

print('hello')
i=0
Y_train=np.zeros((len(os.listdir('train')),width,height,1),dtype='float32')
i=0
for folder in os.listdir('train'):
  mask = np.zeros((height, width, 1), dtype=np.bool)
  img_path=os.path.join('train/'+folder)
  path=os.path.join(img_path+'/'+'masks')
  for masks in os.listdir(path):
    final=os.path.join(path+'/'+masks)
    mask_ = imread(final)
    mask_ = np.expand_dims(resize(mask_, (height, width), mode='constant', 
                                      preserve_range=True), axis=-1)
    mask = np.maximum(mask, mask_)
  Y_train[i]=mask

Y_train.shape

def conv2d_block(input_tensor, n_filters, kernel_size = 3, batchnorm = True):
    """Function to add 2 convolutional layers with the parameters passed to it"""
    # first layer
    x = Conv2D(filters = n_filters, kernel_size = (kernel_size, kernel_size),
              kernel_initializer = 'he_normal', padding = 'same')(input_tensor)
    if batchnorm:
        x = BatchNormalization()(x)
    x = Activation('relu')(x)
    
    # second layer
    x = Conv2D(filters = n_filters, kernel_size = (kernel_size, kernel_size),\
              kernel_initializer = 'he_normal', padding = 'same')(input_tensor)
    if batchnorm:
        x = BatchNormalization()(x)
    x = Activation('relu')(x)
    
    return x

def get_unet(input_img, n_filters = 16, dropout = 0.1, batchnorm = True):
    # Contracting Path
    c1 = conv2d_block(input_img, n_filters * 1, kernel_size = 3, batchnorm = batchnorm)
    p1 = MaxPooling2D((2, 2))(c1)
    p1 = Dropout(dropout)(p1)
    
    c2 = conv2d_block(p1, n_filters * 2, kernel_size = 3, batchnorm = batchnorm)
    p2 = MaxPooling2D((2, 2))(c2)
    p2 = Dropout(dropout)(p2)
    
    c3 = conv2d_block(p2, n_filters * 4, kernel_size = 3, batchnorm = batchnorm)
    p3 = MaxPooling2D((2, 2))(c3)
    p3 = Dropout(dropout)(p3)
    
    c4 = conv2d_block(p3, n_filters * 8, kernel_size = 3, batchnorm = batchnorm)
    p4 = MaxPooling2D((2, 2))(c4)
    p4 = Dropout(dropout)(p4)
    
    c5 = conv2d_block(p4, n_filters = n_filters * 16, kernel_size = 3, batchnorm = batchnorm)
    
    # Expansive Path
    u6 = Conv2DTranspose(n_filters * 8, (3, 3), strides = (2, 2), padding = 'same')(c5)
    u6 = concatenate([u6, c4])
    u6 = Dropout(dropout)(u6)
    c6 = conv2d_block(u6, n_filters * 8, kernel_size = 3, batchnorm = batchnorm)
    
    u7 = Conv2DTranspose(n_filters * 4, (3, 3), strides = (2, 2), padding = 'same')(c6)
    u7 = concatenate([u7, c3])
    u7 = Dropout(dropout)(u7)
    c7 = conv2d_block(u7, n_filters * 4, kernel_size = 3, batchnorm = batchnorm)
    
    u8 = Conv2DTranspose(n_filters * 2, (3, 3), strides = (2, 2), padding = 'same')(c7)
    u8 = concatenate([u8, c2])
    u8 = Dropout(dropout)(u8)
    c8 = conv2d_block(u8, n_filters * 2, kernel_size = 3, batchnorm = batchnorm)
    
    u9 = Conv2DTranspose(n_filters * 1, (3, 3), strides = (2, 2), padding = 'same')(c8)
    u9 = concatenate([u9, c1])
    u9 = Dropout(dropout)(u9)
    c9 = conv2d_block(u9, n_filters * 1, kernel_size = 3, batchnorm = batchnorm)
    
    outputs = Conv2D(1, (1, 1), activation='sigmoid')(c9)
    model = Model(inputs=[input_img], outputs=[outputs])
    return model

X_train1, X_test1, Y_train1, Y_test1 = train_test_split(X_train, Y_train, test_size = 0.2, random_state = 1)

ix = 21
imshow(X_train[ix])
plt.show()
imshow(np.squeeze(Y_train[ix]))
plt.show()

input_img = Input((height, width, channels), name='img')
model1 = get_unet(input_img, n_filters=16, dropout=0.05, batchnorm=True)
model1.compile(optimizer=Adam(), loss="binary_crossentropy", metrics=["accuracy"])
model1.summary()

callbacks = [
    EarlyStopping(patience=10, verbose=1),
    ReduceLROnPlateau(factor=0.1, patience=5, min_lr=0.00001, verbose=1),
    ModelCheckpoint('model1.h5', verbose=1, save_best_only=True, save_weights_only=True)
]

history = model.fit(X_train1, Y_train1, epochs=25, batch_size=16, validation_data=(X_test1, Y_test1),callbacks=callbacks)

history = model1.fit(X_train1, Y_train1, epochs=5, batch_size=32, validation_data=(X_test1, Y_test1),callbacks=callbacks)

# Predict on train, val and test
preds_train = model1.predict(X_train1, verbose=1)
preds_val = model1.predict(X_test1, verbose=1)
preds_test = model1.predict(X_test, verbose=1)

# Threshold predictions
preds_train_t = (preds_train > 0.5).astype(np.uint8)
preds_val_t = (preds_val > 0.5).astype(np.uint8)
preds_test_t = (preds_test > 0.5).astype(np.uint8)

ix = 121
imshow(X_train1[ix])
plt.show()
imshow(np.squeeze(Y_train1[ix]))
plt.show()
imshow(np.squeeze(preds_train_t[ix]))
plt.show()

ix = 3
imshow(X_train1[ix])
plt.show()
imshow(np.squeeze(Y_train1[ix]))
plt.show()
imshow(np.squeeze(preds_train_t[ix]))
plt.show()

ix = 21
imshow(X_test1[ix])
plt.show()
imshow(np.squeeze(Y_test1[ix]))
plt.show()
imshow(np.squeeze(preds_val_t[ix]))
plt.show()

